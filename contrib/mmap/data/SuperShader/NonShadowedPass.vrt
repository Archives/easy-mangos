/**
 @file SuperShader.vert
 @author Morgan McGuire, matrix@graphics3d.com
 */

/** Texture coordinate */
varying vec2 texCoord;

varying vec3 wsEyePos;

varying vec3 wsPosition;

#ifdef NORMALBUMPMAP  
	/** Vector to the eye in tangent space (needed for parallax) */
	varying vec3 _tsE;

	/** Tangent space to world space.
    Note that this will be linearly interpolated across the polygon.

	NVIDIA drivers do not properly interpolate mat4, so we must pass
	the columns along a separate vectors. */
	varying vec4 tan_X, tan_Y, tan_W;
#endif

varying vec4 tan_Z; 

/** Used for "ambient occlusion" */
varying float accessibility;

void main(void) {
    vec3 wsEyePos = g3d_CameraToWorldMatrix[3].xyz;
    vec3 osEyePos = (g3d_WorldToObjectMatrix * vec4(wsEyePos, 1)).xyz;
	vec3 osPosition  = gl_Vertex.xyz;

    // Object space eye vector
    vec3 osE = osEyePos - osPosition;

	// Compute the columns of the tangent space to world space matrix
    accessibility = length(gl_Normal);

#   ifndef NORMALBUMPMAP
      // When not normal-bump mapping, we still need tan_W for lighting.
       vec4 tan_W;
#   endif

    tan_W = g3d_ObjectToWorldMatrix * gl_Vertex;

    tan_Z = g3d_ObjectToWorldMatrix * vec4(gl_Normal / accessibility, 0);

    wsPosition      = tan_W.xyz;

#   ifdef NORMALBUMPMAP      
	tan_X = g3d_ObjectToWorldMatrix * vec4(gl_MultiTexCoord1.xyz, 0);

        // T and N are guaranteed perpendicular, so B is normalized.
	tan_Y = vec4(cross(tan_Z.xyz, tan_X.xyz), 0);

	// Compute the tangent space eye vector (ATI does not support the transpose operator)
	mat3 objectToTangent = mat3(tan_X.x, tan_Y.x, tan_Z.x,
                                    tan_X.y, tan_Y.y, tan_Z.y,
                                    tan_X.z, tan_Y.z, tan_Z.z);
      
       _tsE             = objectToTangent * (osEyePos - osPosition);
#    endif

    texCoord     = (gl_TextureMatrix[0] * gl_MultiTexCoord0).st;
    gl_Position  = ftransform();
}
