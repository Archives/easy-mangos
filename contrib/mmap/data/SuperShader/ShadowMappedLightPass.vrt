/**
 @file SuperShader.vert
 @author Morgan McGuire, matrix@graphics3d.com
 */

#ifdef NORMALBUMPMAP
    /** Vector to the eye in tangent space (needed for parallax) */
    varying vec3 _tsE;

    /** Tangent space to world space.
    Note that this will be linearly interpolated across the polygon.

    NVIDIA drivers do not properly interpolate mat4, so we must pass
    the columns along a separate vectors. */
    varying vec4 tan_X, tan_Y;
#endif

/** tan_Z.xyz is the world space position */
varying vec4 tan_Z, tan_W; 

/** Modelview projection matrix used for the light's shadow map */
uniform mat4 lightMVP;

/** Coordinate to use in the shadow map */
varying vec4 shadowCoord;

varying vec2 texCoord;

/** Used for "ambient occlusion" Unit normals are assumed to observe a full hemisphere; less 
    than unit length normals see the proportion of the hemisphere.*/
varying float accessibility;

void main(void) {
    vec3 wsEyePos = g3d_CameraToWorldMatrix[3].xyz;
    vec3 osEyePos = (g3d_WorldToObjectMatrix * vec4(wsEyePos, 1)).xyz;
    vec3 osPosition = gl_Vertex.xyz;

    // Object space eye vector
    vec3 osE = osEyePos - osPosition;

    // Compute the columns of the tangent space to world space matrix

    accessibility = length(gl_Normal);

    tan_W = g3d_ObjectToWorldMatrix * gl_Vertex;


    tan_Z = g3d_ObjectToWorldMatrix * vec4(gl_Normal / accessibility, 0);

#   ifdef NORMALBUMPMAP
        tan_X = g3d_ObjectToWorldMatrix * vec4(gl_MultiTexCoord1.xyz, 0);

        // T and N are guaranteed perpendicular, so B is normalized.
        tan_Y = vec4(cross(tan_Z.xyz, tan_X.xyz), 0);


        // Compute the tangent space eye vector (ATI does not support the transpose operator)
        mat3 objectToTangent = mat3(tan_X.x, tan_Y.x, tan_Z.x,
                                    tan_X.y, tan_Y.y, tan_Z.y,
                                    tan_X.z, tan_Y.z, tan_Z.z);

        _tsE         = objectToTangent * osE;
#    endif

    // Note that tan_W is objectToWorld * gl_Vertex
    shadowCoord      = lightMVP * tan_W;

	texCoord	     = (gl_TextureMatrix[0] * gl_MultiTexCoord0).st;
    gl_Position      = ftransform();
}
